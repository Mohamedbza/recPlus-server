{
	"info": {
		"_postman_id": "12345678-1234-1234-1234-123456789012",
		"name": "RecruitmentPlus CRM API",
		"description": "Complete API testing suite for RecruitmentPlus CRM backend with 48 endpoints",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "üîê Authentication",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has user data\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('_id');",
									"    pm.expect(responseJson.email).to.include('@');",
									"    pm.environment.set(\"userId\", responseJson._id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"email\": \"test.user@example.com\",\n  \"password\": \"password123\",\n  \"role\": \"employer\",\n  \"region\": \"montreal\",\n  \"department\": \"Testing\",\n  \"position\": \"QA Tester\"\n}"
						},
						"url": {
							"raw": "{{apiUrl}}/users",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"users"
							]
						}
					}
				}
			]
		},
		{
			"name": "üë• Users Management",
			"item": [
				{
					"name": "Get All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is array\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an('array');",
									"    pm.expect(responseJson.length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Users have required fields\", function () {",
									"    const responseJson = pm.response.json();",
									"    const user = responseJson[0];",
									"    pm.expect(user).to.have.property('firstName');",
									"    pm.expect(user).to.have.property('lastName');",
									"    pm.expect(user).to.have.property('email');",
									"    pm.expect(user).to.have.property('role');",
									"    pm.expect(user).to.have.property('region');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/users",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"users"
							]
						}
					}
				},
				{
					"name": "Get Users by Region - Montreal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"All users are from Montreal\", function () {",
									"    const responseJson = pm.response.json();",
									"    responseJson.forEach(user => {",
									"        pm.expect(user.region).to.eql('montreal');",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/users/region/montreal",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"users",
								"region",
								"montreal"
							]
						}
					}
				},
				{
					"name": "Get Users by Region - Dubai",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/users/region/dubai",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"users",
								"region",
								"dubai"
							]
						}
					}
				},
				{
					"name": "Get Users by Region - Turkey",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/users/region/turkey",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"users",
								"region",
								"turkey"
							]
						}
					}
				},
				{
					"name": "Filter Users by Role",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/users?role=admin",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "role",
									"value": "admin"
								}
							]
						}
					}
				},
				{
					"name": "Filter Active Users",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/users?isActive=true",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "isActive",
									"value": "true"
								}
							]
						}
					}
				}
			]
		},
		{
			"name": "üè¢ Companies Management",
			"item": [
				{
					"name": "Get All Companies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Companies have required fields\", function () {",
									"    const responseJson = pm.response.json();",
									"    const company = responseJson[0];",
									"    pm.expect(company).to.have.property('name');",
									"    pm.expect(company).to.have.property('email');",
									"    pm.expect(company).to.have.property('phone');",
									"    pm.expect(company).to.have.property('address');",
									"    pm.expect(company).to.have.property('industry');",
									"    pm.environment.set(\"companyId\", company._id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/companies",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"companies"
							]
						}
					}
				},
				{
					"name": "Create Company",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Company created successfully\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.name).to.eql('Test Company Ltd');",
									"    pm.expect(responseJson.email).to.eql('contact@testcompany.com');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Test Company Ltd\",\n  \"email\": \"contact@testcompany.com\",\n  \"phone\": \"+1-555-0199\",\n  \"address\": \"123 Test Street, Test City, TC 12345\",\n  \"industry\": \"Technology\",\n  \"description\": \"A test company for API testing purposes\",\n  \"website\": \"https://testcompany.com\",\n  \"companySize\": \"small\",\n  \"isVerified\": false\n}"
						},
						"url": {
							"raw": "{{apiUrl}}/companies",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"companies"
							]
						}
					}
				},
				{
					"name": "Filter Companies by Industry",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/companies?industry=Technology",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"companies"
							],
							"query": [
								{
									"key": "industry",
									"value": "Technology"
								}
							]
						}
					}
				},
				{
					"name": "Filter Verified Companies",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/companies?isVerified=true",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"companies"
							],
							"query": [
								{
									"key": "isVerified",
									"value": "true"
								}
							]
						}
					}
				}
			]
		},
		{
			"name": "üë®‚Äçüíº Candidates Management",
			"item": [
				{
					"name": "Get All Candidates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Candidates have required fields\", function () {",
									"    const responseJson = pm.response.json();",
									"    const candidate = responseJson[0];",
									"    pm.expect(candidate).to.have.property('firstName');",
									"    pm.expect(candidate).to.have.property('lastName');",
									"    pm.expect(candidate).to.have.property('email');",
									"    pm.expect(candidate).to.have.property('skills');",
									"    pm.environment.set(\"candidateId\", candidate._id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/candidates",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"candidates"
							]
						}
					}
				},
				{
					"name": "Filter Candidates by Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"All candidates have active status\", function () {",
									"    const responseJson = pm.response.json();",
									"    responseJson.forEach(candidate => {",
									"        pm.expect(candidate.status).to.eql('active');",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/candidates?status=active",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"candidates"
							],
							"query": [
								{
									"key": "status",
									"value": "active"
								}
							]
						}
					}
				},
				{
					"name": "Filter Candidates by Skills",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/candidates?skills=React",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"candidates"
							],
							"query": [
								{
									"key": "skills",
									"value": "React"
								}
							]
						}
					}
				}
			]
		},
		{
			"name": "üíº Jobs Management",
			"item": [
				{
					"name": "Get All Jobs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Jobs have required fields\", function () {",
									"    const responseJson = pm.response.json();",
									"    const job = responseJson[0];",
									"    pm.expect(job).to.have.property('title');",
									"    pm.expect(job).to.have.property('company');",
									"    pm.expect(job).to.have.property('companyId');",
									"    pm.expect(job).to.have.property('location');",
									"    pm.expect(job).to.have.property('description');",
									"    pm.environment.set(\"jobId\", job._id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/jobs",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"jobs"
							]
						}
					}
				},
				{
					"name": "Filter Remote Jobs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"All jobs are remote\", function () {",
									"    const responseJson = pm.response.json();",
									"    responseJson.forEach(job => {",
									"        pm.expect(job.isRemote).to.be.true;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/jobs?isRemote=true",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"jobs"
							],
							"query": [
								{
									"key": "isRemote",
									"value": "true"
								}
							]
						}
					}
				},
				{
					"name": "Filter Featured Jobs",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/jobs?isFeatured=true",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"jobs"
							],
							"query": [
								{
									"key": "isFeatured",
									"value": "true"
								}
							]
						}
					}
				},
				{
					"name": "Filter Jobs by Company",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/jobs?companyId={{companyId}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"jobs"
							],
							"query": [
								{
									"key": "companyId",
									"value": "{{companyId}}"
								}
							]
						}
					}
				}
			]
		},
		{
			"name": "üéØ Skills Management",
			"item": [
				{
					"name": "Get All Skills",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Skills have required fields\", function () {",
									"    const responseJson = pm.response.json();",
									"    const skill = responseJson[0];",
									"    pm.expect(skill).to.have.property('name');",
									"    pm.expect(skill).to.have.property('category');",
									"    pm.environment.set(\"skillId\", skill._id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/skills",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"skills"
							]
						}
					}
				},
				{
					"name": "Filter Skills by Category - Frontend",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"All skills are Frontend category\", function () {",
									"    const responseJson = pm.response.json();",
									"    responseJson.forEach(skill => {",
									"        pm.expect(skill.category).to.eql('Frontend');",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/skills?category=Frontend",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"skills"
							],
							"query": [
								{
									"key": "category",
									"value": "Frontend"
								}
							]
						}
					}
				},
				{
					"name": "Filter Skills by Category - Backend",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/skills?category=Backend",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"skills"
							],
							"query": [
								{
									"key": "category",
									"value": "Backend"
								}
							]
						}
					}
				},
				{
					"name": "Filter Popular Skills",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/skills?isPopular=true",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"skills"
							],
							"query": [
								{
									"key": "isPopular",
									"value": "true"
								}
							]
						}
					}
				}
			]
		},
		{
			"name": "üìÑ Applications Management",
			"item": [
				{
					"name": "Get All Applications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Applications have required fields\", function () {",
									"    const responseJson = pm.response.json();",
									"    const application = responseJson[0];",
									"    pm.expect(application).to.have.property('candidateId');",
									"    pm.expect(application).to.have.property('jobId');",
									"    pm.expect(application).to.have.property('companyId');",
									"    pm.expect(application).to.have.property('status');",
									"    pm.environment.set(\"applicationId\", application._id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/applications",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"applications"
							]
						}
					}
				},
				{
					"name": "Filter Applications by Status",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/applications?status=interview",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"applications"
							],
							"query": [
								{
									"key": "status",
									"value": "interview"
								}
							]
						}
					}
				},
				{
					"name": "Filter Applications by Candidate",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/applications?candidateId={{candidateId}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"applications"
							],
							"query": [
								{
									"key": "candidateId",
									"value": "{{candidateId}}"
								}
							]
						}
					}
				},
				{
					"name": "Filter Applications by Job",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/applications?jobId={{jobId}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"applications"
							],
							"query": [
								{
									"key": "jobId",
									"value": "{{jobId}}"
								}
							]
						}
					}
				}
			]
		},
		{
			"name": "üîç Advanced Filtering",
			"item": [
				{
					"name": "Complex Query - Active Remote Featured Jobs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Jobs match all criteria\", function () {",
									"    const responseJson = pm.response.json();",
									"    responseJson.forEach(job => {",
									"        pm.expect(job.status).to.eql('active');",
									"        pm.expect(job.isRemote).to.be.true;",
									"        pm.expect(job.isFeatured).to.be.true;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/jobs?status=active&isRemote=true&isFeatured=true",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"jobs"
							],
							"query": [
								{
									"key": "status",
									"value": "active"
								},
								{
									"key": "isRemote",
									"value": "true"
								},
								{
									"key": "isFeatured",
									"value": "true"
								}
							]
						}
					}
				},
				{
					"name": "Pagination Test - Candidates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has pagination limit\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.length).to.be.at.most(3);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/candidates?page=1&limit=3",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"candidates"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "3"
								}
							]
						}
					}
				},
				{
					"name": "Search Users by Name",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/users?search=John",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "search",
									"value": "John"
								}
							]
						}
					}
				}
			]
		},
		{
			"name": "‚ùå Error Handling",
			"item": [
				{
					"name": "Invalid Endpoint Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/invalid-endpoint",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"invalid-endpoint"
							]
						}
					}
				},
				{
					"name": "Invalid Data Test - User Creation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 or 500\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 500]);",
									"});",
									"",
									"pm.test(\"Response indicates validation error\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"Test\",\n  \"email\": \"invalid-email\",\n  \"password\": \"123\"\n}"
						},
						"url": {
							"raw": "{{apiUrl}}/users",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"users"
							]
						}
					}
				},
				{
					"name": "Invalid ID Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 or 404\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 404]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/users/invalid-id-format",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"users",
								"invalid-id-format"
							]
						}
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000"
		},
		{
			"key": "apiUrl",
			"value": "{{baseUrl}}/api"
		}
	]
} 